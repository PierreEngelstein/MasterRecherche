import unittest
from interval.interval import Interval


class TestInterval(unittest.TestCase):
    def test_add_neg_sub(self):
        self.assertEqual(Interval(1, 5) + Interval(3, 7), Interval(4, 12))
        self.assertEqual(Interval(1, 5) + Interval(-3, 7), Interval(-2, 12))
        self.assertEqual(Interval(1, 5) + Interval(-7, -3), Interval(-6, 2))
        self.assertEqual(Interval(1, 5) + 3, Interval(4, 8))
        self.assertEqual(3+Interval(1, 5), Interval(4, 8))
        self.assertEqual(Interval(1, 5) + (-3), Interval(-2, 2))
        self.assertEqual((-3) + Interval(1, 5), Interval(-2, 2))
        self.assertEqual(Interval(-1, 5) + Interval(3, 7), Interval(2, 12))
        self.assertEqual(Interval(-1, 5) + Interval(-3, 7), Interval(-4, 12))
        self.assertEqual(Interval(-1, 5) + Interval(-7, -3), Interval(-8, 2))
        self.assertEqual(3+Interval(-1, 5), Interval(2, 8))
        self.assertEqual(Interval(-1, 5)+3, Interval(2, 8))
        self.assertEqual(Interval(-1, 5) + (-3), Interval(-4, 2))
        self.assertEqual((-3) + Interval(-1, 5), Interval(-4, 2))
        self.assertEqual(Interval(-5, -1) + Interval(3, 7), Interval(-2, 6))
        self.assertEqual(Interval(-5, -1) + Interval(-3, 7), Interval(-8, 6))
        self.assertEqual(Interval(-5, -1) + Interval(-7, -3), Interval(-12, -4))
        self.assertEqual(Interval(-5, -1)+3, Interval(-2, 2))
        self.assertEqual(3+Interval(-5, -1), Interval(-2, 2))
        self.assertEqual(Interval(-5, -1) + (-3), Interval(-8, -4))
        self.assertEqual((-3) + Interval(-5, -1), Interval(-8, -4))
        self.assertEqual(Interval(1, 5) - Interval(3, 7), Interval(-6, 2))
        self.assertEqual(Interval(1, 5) - Interval(-3, 7), Interval(-6, 8))
        self.assertEqual(Interval(1, 5) - Interval(-7, -3), Interval(4, 12))
        self.assertEqual(Interval(1, 5) - 3, Interval(-2, 2))
        self.assertEqual(3 - Interval(1, 5), Interval(-2, 2))
        self.assertEqual(Interval(1, 5) - (-3), Interval(4, 8))
        self.assertEqual((-3) - Interval(1, 5), Interval(-8, -4))
        self.assertEqual(Interval(-1, 5) - Interval(3, 7), Interval(-8, 2))
        self.assertEqual(Interval(-1, 5) - Interval(-3, 7), Interval(-8, 8))
        self.assertEqual(Interval(-1, 5) - Interval(-7, -3), Interval(2, 12))
        self.assertEqual(3 - Interval(-1, 5), Interval(-2, 4))
        self.assertEqual(Interval(-1, 5) - 3, Interval(-4, 2))
        self.assertEqual(Interval(-1, 5) - (-3), Interval(2, 8))
        self.assertEqual((-3) - Interval(-1, 5), Interval(-8, -2))
        self.assertEqual(Interval(-5, -1) - Interval(3, 7), Interval(-12, -4))
        self.assertEqual(Interval(-5, -1) - Interval(-3, 7), Interval(-12, 2))
        self.assertEqual(Interval(-5, -1) - Interval(-7, -3), Interval(-2, 6))
        self.assertEqual(Interval(-5, -1) - 3, Interval(-8, -4))
        self.assertEqual(3 - Interval(-5, -1), Interval(4, 8))
        self.assertEqual(Interval(-5, -1) - (-3), Interval(-2, 2))
        self.assertEqual((-3) - Interval(-5, -1), Interval(-2, 2))
        self.assertEqual(-Interval(3, 7), Interval(-7, -3))
        self.assertEqual(-Interval(-3, 7), Interval(-7, 3))
        self.assertEqual(-Interval(-7, -3), Interval(3, 7))
        print("[INTERVAL] add / neg / sub OK")

    def test_multiplication(self):
        self.assertEqual(Interval(1, 5) * Interval(3, 7), Interval(3, 35))
        self.assertEqual(Interval(1, 5) * Interval(-3, 7), Interval(-15, 35))
        self.assertEqual(Interval(1, 5) * Interval(-7, -3), Interval(-35, -3))
        self.assertEqual(Interval(-1, 5) * Interval(3, 7), Interval(-7, 35))
        self.assertEqual(Interval(-1, 5) * Interval(-3, 7), Interval(-15, 35))
        self.assertEqual(Interval(-1, 5) * Interval(-7, -3), Interval(-35, 7))
        self.assertEqual(Interval(-5, -1) * Interval(3, 7), Interval(-35, -3))
        self.assertEqual(Interval(-5, -1) * Interval(-3, 7), Interval(-35, 15))
        self.assertEqual(Interval(-5, -1) * Interval(-7, -3), Interval(3, 35))
        self.assertEqual(3 * Interval(3, 7), Interval(9, 21))
        self.assertEqual(3 * Interval(-3, 7), Interval(-9, 21))
        self.assertEqual(3 * Interval(-7, -3), Interval(-21, -9))
        self.assertEqual(Interval(3, 7) * 3, Interval(9, 21))
        self.assertEqual(Interval(-3, 7) * 3, Interval(-9, 21))
        self.assertEqual(Interval(-7, -3) * 3, Interval(-21, -9))
        self.assertEqual(-3 * Interval(3, 7), Interval(-21, -9))
        self.assertEqual(-3 * Interval(-3, 7), Interval(-21, 9))
        self.assertEqual(-3 * Interval(-7, -3), Interval(9, 21))
        self.assertEqual(Interval(3, 7) * (-3), Interval(-21, -9))
        self.assertEqual(Interval(-3, 7) * (-3), Interval(-21, 9))
        self.assertEqual(Interval(-7, -3) * (-3), Interval(9, 21))

        # warning : 0 * float("inf") => float("nan")
        #           and we want that 0 * float("inf") => 0
        self.assertEqual(0 * Interval(float("-inf"), float("+inf")), Interval(0, 0))
        self.assertEqual(Interval(float("-inf"), float("+inf")) * 0, Interval(0, 0))
        res = Interval(float("-inf"), float("+inf")) * Interval(0, float("inf"))
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        res = Interval(float("-inf"), float("+inf")) * Interval(float("-inf"), 0)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        self.assertEqual(float("inf") * Interval(0, 7), Interval(0, float("inf")))
        self.assertEqual(float("-inf") * Interval(0, 7), Interval(float("-inf"), 0))

        print("[INTERVAL] multiplication OK")

    def test_division(self):
        res = Interval(3, 7) / Interval(1, 5)
        self.assertAlmostEqual(res.inf, 0.6, 5)
        self.assertAlmostEqual(res.sup, 7, 5)
        res = Interval(3, 7) / Interval(-1, 5)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        res = Interval(3, 7) / Interval(-5, -1)
        self.assertAlmostEqual(res.inf, -7, 5)
        self.assertAlmostEqual(res.sup, -0.6, 5)

        res = Interval(-3, 7) / Interval(1, 5)
        self.assertAlmostEqual(res.inf, -3, 5)
        self.assertAlmostEqual(res.sup, 7, 5)
        res = Interval(-3, 7) / Interval(-1, 5)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        res = Interval(-3, 7) / Interval(-5, -1)
        self.assertAlmostEqual(res.inf, -7, 5)
        self.assertAlmostEqual(res.sup, 3, 5)

        res = Interval(-7, -3) / Interval(1, 5)
        self.assertAlmostEqual(res.inf, -7, 5)
        self.assertAlmostEqual(res.sup, -0.6, 5)
        res = Interval(-7, -3) / Interval(-1, 5)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        res = Interval(-7, -3) / Interval(-5, -1)
        self.assertAlmostEqual(res.inf, 0.6, 5)
        self.assertAlmostEqual(res.sup, 7, 5)

        res = Interval(0, 0) / Interval(1, 5)
        self.assertAlmostEqual(res.inf, 0, 5)
        self.assertAlmostEqual(res.sup, 0, 5)
        res = Interval(0, 0) / Interval(-1, 5)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        res = Interval(0, 0) / Interval(-5, -1)
        self.assertAlmostEqual(res.inf, 0, 5)
        self.assertAlmostEqual(res.sup, 0, 5)

        res = Interval(-7, -3) / 3
        self.assertAlmostEqual(res.inf, -2.333333, 5)
        self.assertAlmostEqual(res.sup, -1, 5)
        res = 3 / Interval(-7, -3)
        self.assertAlmostEqual(res.inf, -1, 5)
        self.assertAlmostEqual(res.sup, -0.428571, 5)
        res = Interval(-7, -3) / (-3)
        self.assertAlmostEqual(res.sup, 2.333333, 5)
        self.assertAlmostEqual(res.inf, 1, 5)
        res = (-3) / Interval(-7, -3)
        self.assertAlmostEqual(res.sup, 1, 5)
        self.assertAlmostEqual(res.inf, 0.428571, 5)

        res = Interval(3, 7) / 3
        self.assertAlmostEqual(res.sup, 2.333333, 5)
        self.assertAlmostEqual(res.inf, 1, 5)
        res = 3 / Interval(3, 7)
        self.assertAlmostEqual(res.sup, 1, 5)
        self.assertAlmostEqual(res.inf, 0.428571, 5)
        res = Interval(3, 7) / (-3)
        self.assertAlmostEqual(res.inf, -2.333333, 5)
        self.assertAlmostEqual(res.sup, -1, 5)
        res = (-3) / Interval(3, 7)
        self.assertAlmostEqual(res.inf, -1, 5)
        self.assertAlmostEqual(res.sup, -0.428571, 5)

        res = Interval(-7, 3) / 3
        self.assertAlmostEqual(res.inf, -2.333333, 5)
        self.assertAlmostEqual(res.sup, 1, 5)
        res = 3 / Interval(-7, 3)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))
        res = Interval(-7, 3) / (-3)
        self.assertAlmostEqual(res.sup, 2.333333, 5)
        self.assertAlmostEqual(res.inf, -1, 5)
        res = (-3) / Interval(-7, 3)
        self.assertEqual(res.inf, float("-inf"))
        self.assertEqual(res.sup, float("inf"))

        """print("1", float("inf")/float("inf"))
        print("2", float("inf")/float("-inf"))
        print("3", float("-inf")/float("inf"))
        print("4", float("-inf")/float("-inf"))
        print("5", 0/float("inf"))
        print("6", 0/float("-inf"))
        print("7", float("inf")/0)
        print("8", float("-inf")/0)"""

        print("[INTERVAL] division OK")

    def test_is_empty(self):
        self.assertFalse(Interval(0, 0).is_empty())
        self.assertFalse(Interval(-1, 1).is_empty())
        self.assertFalse(Interval(-2, -1).is_empty())
        self.assertFalse(Interval(1, 2).is_empty())
        self.assertFalse(Interval(float("-inf"), 2).is_empty())
        self.assertFalse(Interval(1, float("inf")).is_empty())
        self.assertFalse(Interval(float("-inf"), float("inf")).is_empty())
        self.assertTrue(Interval(float("nan"), 0).is_empty())
        self.assertTrue(Interval(-1, float("nan")).is_empty())
        self.assertTrue(Interval(float("nan"), float("nan")).is_empty())
        print("[INTERVAL] is empty OK")
